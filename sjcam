#! /usr/bin/env python

"""
    sj4000.py - SJCAM SJ4000 Camara support functions

    This code is forked from Adam Laurie <adam@algroup.co.uk>
    and is copyright (c) Adam Laurie 2015, All rights reserved.

    This code is modified by Macavitycode to work with python3 and some other
    modern libraries in June 2022.

    note: camera firmware seems to be very buggy!
    if you send an invalid command parameter, you will likely crash the camera
    and it will stop talking to you. power on/off is the only recourse!
"""

# pylint: disable=line-too-long, too-many-public-methods, no-member, unused-import
# pylint: disable=too-many-locals, too-many-branches, too-many-statements
# pylint: disable=broad-except, fixme, unused-variable, global-statement

import sys
import os
from datetime import datetime
import copy

import cv2
import numpy

import sj4000

RED_IMG = None

if len(sys.argv) == 1:
    print()
    print( 'Usage: ', sys.argv[0], ' <COMMAND> [ARG(s)] [<COMMAND> [ARG(s)] ...]')
    print()
    print( '  Commands:')
    print()
    print( '     BLAM                                   BlamCam mode - detect bullet hits on target (auto switch to PHOTO mode)')
    print( '     CONFIG                                 Show camera config and status')
    print( '     DATE <YYYY-MM-DD>                      Set camera date')
    print( '     DEBUG <OFF | ON>                       Set DEBUG printing(')
    print( '     DIR                                    Show PHOTO and MOVIE directory listing')
    print( '     GET <FILE>                             Copy file from camera to local storage')
    print( '     IP <ADDRESS>                           Set IP address (default 192.168.1.254)')
    print( '     MODE <[T]MOVIE | [T]PHOTO>             Set camera to [TIMED] MOVIE or PHOTO mode')
    print( '     PASS <PASSWORD>                        Set WiFi PASSWORD (will not take effect until disconnect/reconnect)')
    print( '     PATH <FILE PATH>                       Set PATH for saving snapshots and movies (default ./)')
    print( '     PING                                   Check camera is visible and connectable on network'		)
    print( '     PREVIEW                                View low-res PHOTO preview image (auto switch to PHOTO mode)')
    print( "     SET <PARAMETER> <VALUE>                Set camera config ('?' to list parameters and/or values)")
    print( '     START                                  START MOVIE recording (auto switch to MOVIE mode)')
    print( '     STOP                                   STOP MOVIE recording or TIMED PHOTO')
    print( '     SYNC                                   Synchronise camera clock & date with host')
    print( '     [G|V]SNAP                              Take a snapshot and optionally [V]iew and/or [G]et it (auto switch to PHOTO mode)')
    print( '     SSID <SSID>                            Set WiFi SSID (will not take effect until disconnect/reconnect)')
    print( '     STREAM                                 View live video stream (auto switch to MOVIE mode)')
    print( '     TIME <HH:MM:SS>                        Set camera clock')
    print()
    print( '  Commands will be executed sequentially and must be combined as appropriate.')
    print()
    sys.exit(True)

def main():
    """
    Entry point
    """

    camera = sj4000.Camera()
    current = 1
    filepath = './'

    while current < len(sys.argv):
        print()
        command = sys.argv[current].upper()

        if command == 'BLAM':
            print('  Entering BlamCam mode')
            stat, info = camera.get_mode()
            if not stat:
                print('    Failed!', info)
                sys.exit(True)
            if info != camera.MODE_PHOTO:
                print('    Setting PHOTO mode')
                stat, info = camera.set_mode('PHOTO')
                if not stat:
                    print('      Failed!', info)
                    sys.exit(True)
                print('      OK')
            print('      Viewing target - hit SPACE in image window after each shot (Q to quit)')
            print('        Review shots with the following keys:')
            print('          A - All')
            print('          C - Clear')
            print('          F - First')
            print('          L - Last')
            print('          N - Next')
            print('          P - Previous')
            print('          SPACE - Resume shooting (take shot first)')
            snap = []
            prev = []
            mask = []
            sequence = 0
            seq_max = 0
            border = 2
            diff = None
            live = True
            pquit = False
            highlight_all = False
            cv2.namedWindow('This Shot', cv2.WINDOW_NORMAL)
            while not pquit:
                win = 'Shot %02d' % sequence
                if live:
                    stat, fname = camera.snap(filepath)
                    if not stat:
                        print('    Failed!', fname)
                        sys.exit(True)
                    snap.append(cv2.imread(filepath + fname))
                    #snap[sequence] = cv2.resize(snap[sequence], (480,640))
                    cv2.namedWindow(win, cv2.WINDOW_NORMAL)
                    cv2.imshow(win, snap[sequence])
                if len(prev) > 0:
                    if live:
                        mask.append(highlight(snap[sequence], prev[sequence - 1]))
                    else:
                        # highlight shot in shot's own window
                        highlight(snap[sequence], prev[sequence - 1], window = win)
                        # highlight shot on latest pic (i.e. see it in-situ)
                        do_highlight(snap[seq_max], mask[sequence - 1])
                # wait for keystroke
                while 42:
                    key = cv2.waitKey(0) & 0xff
                    # map arrow keys
                    # left -> Previous
                    if key == 81:
                        key = 'P'
                    # up -> Last
                    elif key == 82:
                        key = 'L'
                    # right -> Next
                    elif key == 83:
                        key = 'N'
                    # down -> First
                    elif key == 84:
                        key = 'F'
                    else:
                        key = chr(key).upper()
                    # clear highlighted windows if required
                    if highlight_all:
                        for x in range(1, len(snap)):
                            cv2.imshow('Shot %02d' % x, snap[x])
                        highlight_all = False
                    # all
                    if key == 'A':
                        live = False
                        highlight_all = True
                        cv2.imshow(win, snap[sequence])
                        for x in range(1, len(snap)):
                            do_highlight(snap[x], mask[x - 1], window = 'Shot %02d' % x)
                        # show all shots in highlight window
                        do_highlight(snap[seq_max], mask, show_all = True)
                        continue
                    # clear
                    elif key == 'C':
                        cv2.imshow(win, snap[sequence])
                        sequence = seq_max
                        highlight(snap[sequence], prev[sequence - 1])
                        continue
                    # first
                    elif key == 'F':
                        live = False
                        cv2.imshow(win, snap[sequence])
                        sequence = 1
                        break
                    # last
                    elif key == 'L':
                        live = False
                        cv2.imshow(win, snap[sequence])
                        sequence = seq_max
                        break
                    # next
                    elif key == 'N':
                        live = False
                        cv2.imshow(win, snap[sequence])
                        if sequence < seq_max:
                            sequence += 1
                        break
                    # previous
                    elif key == 'P':
                        live = False
                        if sequence >= 2:
                            cv2.imshow(win, snap[sequence])
                            sequence -= 1
                        break
                    # quit
                    elif key == 'Q':
                        pquit = True
                        break
                    # take another shot
                    elif key == ' ':
                        live = True
                        cv2.imshow(win, snap[sequence])
                        sequence = seq_max
                        break
                    # do nothing - wrong key press
                    else:
                        continue
                if live:
                    prev.append(copy.copy(snap[sequence]))
                    sequence += 1
                    seq_max += 1
            cv2.destroyAllWindows()
            current += 1
            continue

        if command == 'CONFIG':
            print('  Camera config:')
            stat, info = camera.print_config()
            if not stat:
                print('    Failed!', info)
                sys.exit(True)
            current += 1
            continue

        if command == 'DATE':
            current += 1
            print('  Setting DATE to', sys.argv[current])
            stat, info = camera.set_date(sys.argv[current])
            if not stat:
                print('    Failed!', info)
                sys.exit(True)
            print('    OK')
            current += 1
            continue

        if command == 'DEBUG':
            current += 1
            arg = sys.argv[current].upper()
            print('  Setting DEBUG to', arg)
            if arg == 'ON':
                camera.DEBUG = True
            elif arg == 'OFF':
                camera.DEBUG = False
            else:
                print('    Failed! Invalid setting:', arg)
                sys.exit(True)
            print('    OK')
            current += 1
            continue

        if command == 'DIR':
            print('  Camera directory:')
            camera.print_directory()
            current += 1
            continue

        if command == 'GET':
            current += 1
            print('  Getting', sys.argv[current])
            stat, fname = camera.get_file(filepath, sys.argv[current])
            if stat:
                print('    Saved to:', filepath + fname)
            else:
                print('    Failed!', fname)
                sys.exit(True)
            current += 1
            continue

        if command == 'IP':
            current += 1
            print('  Set IP to:',)
            try:
                camera.ip = sys.argv[current]
            except Exception as exception:
                print("[WARN]: Exception occured, ", exception)
                print('Failed! Missing IP ADDRESS.')
                sys.exit(True)
            print(camera.ip)
            current += 1
            continue

        if command == 'MODE':
            print('  Setting MODE:',)
            current += 1
            try:
                mode = sys.argv[current].upper()
            except Exception as exception:
                print("[WARN]: Exception occured, ", exception)
                print('Failed! Missing MODE.')
                sys.exit(True)
            print(mode)
            stat, info = camera.set_mode(mode)
            if not stat:
                print('    Failed!', info)
                sys.exit(True)
            print('    OK')
            current += 1
            continue

        if command == 'PASS':
            current += 1
            print('  Setting PASSWORD to', sys.argv[current])
            if len(sys.argv[current]) < 8:
                print('    Failed! PASSWORD must be at least 8 characters')
                sys.exit(True)
            stat, info = camera.set_wifi_pw(sys.argv[current])
            if not stat:
                print('    Failed!', info)
                sys.exit(True)
            print('    OK')
            current += 1
            continue

        if command == 'PATH':
            current += 1
            print('  Setting PATH to', sys.argv[current])
            filepath = sys.argv[current]
            current += 1
            continue

        if command == 'PING':
            print('  Sending network PING to', camera.ip)
            print('   ', camera.ping())
            print()
            print('  Testing HTTP socket on', camera.ip)
            print('   ', camera.http_test())
            current += 1
            continue

        if command == 'PREVIEW':
            print('  Getting PREVIEW image')
            stat, info = camera.get_mode()
            if not stat:
                print('    Failed!', info)
                sys.exit(True)
            if info != camera.MODE_PHOTO:
                print('    Setting PHOTO mode')
                stat, info = camera.set_mode('PHOTO')
                if not stat:
                    print('      Failed!', info)
                    sys.exit(True)
                print('      OK')
            stat, data = camera.get_preview()
            if not stat:
                print('    Failed!', data)
            print('      Viewing preview - hit any key in image window to close')
            nparray = numpy.fromstring(data, numpy.uint8)
            preview = cv2.imdecode(nparray, cv2.CV_LOAD_IMAGE_UNCHANGED)
            cv2.namedWindow('Preview', cv2.WINDOW_NORMAL)
            cv2.imshow('Preview', preview)
            cv2.waitKey(0)
            cv2.destroyAllWindows()
            current += 1
            continue

        if command == 'SET':
            current += 1
            try:
                if sys.argv[current] == '?':
                    param = None
                else:
                    param = sys.argv[current]
                current += 1
                if sys.argv[current] == '?':
                    val = None
                else:
                    val = sys.argv[current]
            except Exception as exception:
                print("[WARN]: Exception occured, ", exception)
                print('    Missing argument(s) to SET!')
                sys.exit(True)
            if not param or not val:
                print('  SET config help:')
                print(				camera.print_config_help(param))
            else:
                print('  Setting', param, 'to', val)
                stat, info = camera.set_config(param, val)
                if not stat:
                    print('    Failed!', info)
                    sys.exit(True)
                print('    OK')
            current += 1
            continue

        if command == 'VGSNAP' or command == 'GVSNAP':
            command = 'VSNAP'
        if command == 'SNAP' or command == 'GSNAP' or command == 'VSNAP':
            print('  Taking snapshot')
            stat, info = camera.get_mode()
            if not stat:
                print('    Failed!', info)
                sys.exit(True)
            if info != camera.MODE_PHOTO and info != camera.MODE_TPHOTO:
                print('    Setting PHOTO mode')
                stat, info = camera.set_mode('PHOTO')
            if not stat:
                print('      Failed!', info)
                sys.exit(True)
                print('      OK')
            if command == 'GSNAP' or command == 'VSNAP':
                stat, fname = camera.snap(filepath)
            else:
                stat, fname = camera.snap(None)
            if not stat:
                print('    Failed!', fname)
                sys.exit(True)
            print('    Image captured:', fname)
            if command == 'GSNAP' or command == 'VSNAP':
                print('      Saved to:', filepath + fname)
            if command == 'VSNAP':
                print('      Viewing image - hit any key in image window to close')
                snap = cv2.imread(filepath + fname)
                cv2.namedWindow('Snapshot ' + fname, cv2.WINDOW_NORMAL)
                cv2.imshow('Snapshot ' + fname, snap)
                cv2.waitKey(0)
                cv2.destroyAllWindows()
            current += 1
            continue

        if command == 'SSID':
            current += 1
            print('  Setting SSID to', sys.argv[current])
            stat, info = camera.set_wifi_name(sys.argv[current])
            if not stat:
                print('    Failed!', info)
                sys.exit(True)
            print('    OK')
            current += 1
            continue

        if command == 'START':
            print('  Starting MOVIE recording')
            stat, mode = camera.get_mode()
            if not stat:
                print('    Failed!', info)
                sys.exit(True)
            if mode != camera.MODE_MOVIE and mode != camera.MODE_TMOVIE:
                print('    Setting MOVIE mode')
                stat, info = camera.set_mode('MOVIE')
                if not stat:
                    print('      Failed!', info)
                    sys.exit(True)
                print('      OK')
            stat, info = camera.start_stop_movie(camera.START)
            if stat:
                print('    OK')
            else:
                print('    Failed!', info)
                sys.exit(True)
            current += 1
            continue

        if command == 'STOP':
            stat, mode = camera.get_mode()
            if not stat:
                print('  STOP failed!', mode)
            if mode == camera.MODE_TPHOTO:
                print('  Stopping TIMED PHOTO')
                stat, fname = camera.snap(None)
                if not stat:
                    print('    Failed!', fname)
                    sys.exit(True)
                print('    Last image captured:', fname)
            else:
                print('  Stopping MOVIE recording')
                stat, info = camera.start_stop_movie(camera.STOP)
                if stat:
                    print('    OK')
                else:
                    print('    Failed!', info)
                    sys.exit(True)
            current += 1
            continue

        if command == 'STREAM':
            print('  Initiating video stream')
            stat, info = camera.get_mode()
            if not stat:
                print('    Failed!', info)
                sys.exit(True)
            if info != camera.MODE_MOVIE:
                print('    Setting MOVIE mode')
                stat, info = camera.set_mode('MOVIE')
                if not stat:
                    print('      Failed!', info)
                    sys.exit(True)
                print('      OK')
            camera.stream()
            current += 1
            continue

        if command == 'SYNC':
            now = datetime.now().isoformat(' ')
            date = now.split(' ')[0]
            print('  Setting DATE to', date)
            stat, info = camera.set_date(date)
            if not stat:
                print('    Failed!', info)
                sys.exit(True)
            print('    OK')
            time = now.split(' ')[1].split('.')[0]
            print('  Setting TIME to', time)
            stat, info = camera.set_time(time)
            if not stat:
                print('    Failed!', info)
                sys.exit(True)
            print('    OK')
            current += 1
            continue

        if command == 'TIME':
            current += 1
            print('  Setting TIME to', sys.argv[current])
            stat, info = camera.set_time(sys.argv[current])
            if not stat:
                print('    Failed!', info)
                sys.exit(True)
            print('    OK')
            current += 1
            continue

        print()
        print('Unrecognised command:', sys.argv[current])
        sys.exit(True)
    print()
    sys.exit(False)

def highlight(snap, prev, window = 'This Shot'):
    """
    Function to define a highlight
    """

    diff = cv2.subtract(prev, snap)
    # remove noise
    diff = cv2.medianBlur(diff, 9)
    # shrink mask to original size as blur will have made it larger
    kernel = numpy.ones((3,3),numpy.uint8)
    diff = cv2.erode(diff, kernel)
    # convert to greyscale so we can apply threshold
    diff = cv2.cvtColor(diff, cv2.COLOR_BGR2GRAY)
    # apply threshold so we have a b&w image we can use as a mask
    diff = cv2.threshold(diff, 10, 255, cv2.THRESH_BINARY)[1]
    do_highlight(snap, diff, window)
    return diff

def do_highlight(snap, mask, window = 'This Shot', show_all = False):
    """
    Function to highlight specific mask in a given snap
    """

    global RED_IMG

    if RED_IMG is None:
        # create a solid red image of the same size as original to be used for highlighting
        RED_IMG = copy.copy(snap)
        for i in range(RED_IMG.shape[0]):
            for j in range(RED_IMG.shape[1]):
                RED_IMG[i, j] = [0, 0, 255]

    # special case where we want to combine multiple masks, so the whole array is passed
    if show_all:
        mask_all = copy.copy(mask[0])
        for x in range(1, len(mask)):
            cv2.bitwise_or(mask_all, mask[x], mask_all)
        mask = mask_all

    # create a combined image with shot highlighted
    combined = cv2.bitwise_and(snap, snap, mask = ~mask)
    cv2.bitwise_or(combined, RED_IMG, combined, mask = mask)
    # draw a red line around window to show which shot we're looking at
    if window != "This Shot":
        cv2.rectangle(combined, (0, 0), (combined.shape[1] - 1, combined.shape[0] - 1),(0, 0, 255), thickness = 8)
    cv2.imshow(window, combined)


if __name__ == "__main__":
    main()
